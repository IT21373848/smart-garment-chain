name: Deploy to EC2

on:
  push:
    branches:
      - main # Change to your deployment branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 52.87.170.241
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Switch to home directory
            cd ~

            # Install dependencies
            sudo yum update -y
            sudo yum install -y docker git

            # Start Docker if not running
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

            # Install Docker Compose (Amazon Linux)
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Install Node.js & PM2
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            # Clone or update repository
            if [ ! -d "supplychain-app" ]; then
              git clone https://github.com/IT21373848/smart-garment-chain.git supplychain-app
            fi

            # Navigate to the project folder
            cd supplychain-app/apps

            # Pull latest code
            git reset --hard
            git pull origin main

            # ðŸ”¥ Stop any existing Flask process
            pm2 stop flask-api || true

            # Change directory to Python API
            cd backend/python-api

            # Export the OpenAI key as env var for this session
            export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            # Set a custom TMPDIR to avoid RAM-backed /tmp limitations
            mkdir -p ~/tmp_pip

            # Install Python dependencies using custom TMPDIR
            TMPDIR=~/tmp_pip pip install -r src/requirements.txt

            # Start Flask using PM2 (Gunicorn for production)
            pm2 start gunicorn --name flask-api --workers 4 --bind 0.0.0.0:5001 src.app:app --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            # ðŸ”¥ Stop any existing Next.js process
            pm2 stop nextjs || true

            # Change to Next.js project directory
            cd ../../Supply-chain-main

            # Install dependencies
            yarn install --frozen-lockfile

            # Build the Next.js application
            yarn build

            # Start Next.js using PM2
            pm2 start yarn --name nextjs -- start

            # Save PM2 process list
            pm2 save
